
# # Initialize Firebase Admin
# cred = credentials.Certificate('D:/Tubes/Beta V.1/build/lostandfound-78452-firebase-adminsdk-lfwma-f76a4caa1b.json')
# firebase_admin.initialize_app(cred)

# def login_with_google():
#     try:
#         credentials_path = "client_secret_397750283025-8gl75si6f9ictssmrsc4f478de7t7l2s.apps.googleusercontent.com.json"  # Update path as needed
#         SCOPES = ['https://www.googleapis.com/auth/userinfo.email', 'openid']

#         flow = InstalledAppFlow.from_client_secrets_file(credentials_path, SCOPES)
#         creds = flow.run_local_server(port=8080)  

#         id_token = creds.id_token  

#         decoded_token = auth.verify_id_token(id_token)

#         if decoded_token['aud'] != 'lostandfound-78452':  # Your Firebase project ID
#             raise Exception("Audience claim in ID token is invalid!")

#         email = decoded_token['email']  

#         if "@student.itk.ac.id" not in email:
#             messagebox.showerror("Error", "Only @student.itk.ac.id email addresses are allowed.")
#             return

#         db = firestore.client()
#         users_ref = db.collection('users')

#         user_doc = users_ref.where('email', '==', email).get()
#         if len(user_doc) == 0:
#             username = email.split('@')[0]  
#             users_ref.add({
#                 'username': username,
#                 'email': email
#             })

#         messagebox.showinfo("Success", f"Login successful as {email}.")
#         subprocess.run(["python", "gui.py"])  

#     except Exception as e:
#         messagebox.showerror("Error", f"Login failed: {str(e)}")

# def login_with_google():
#     try:
#         flow = InstalledAppFlow.from_client_secrets_file(
#             'client_secret_397750283025-8gl75si6f9ictssmrsc4f478de7t7l2s.apps.googleusercontent.com.json',
#             scopes=['https://www.googleapis.com/auth/userinfo.email', 'openid']
#         )

#         credentials = flow.run_local_server(port=8080, open_browser=True)

#         id_token = credentials.id_token

#         user = auth.sign_in_with_custom_token(id_token)
#         user_info = auth.get_account_info(user['idToken'])

#         email = user_info['users'][0]['email']
        
#         if "@student.itk.ac.id" not in email:
#             messagebox.showerror("Error", "Hanya email @student.itk.ac.id yang diizinkan.")
#             return

    #     db = firestore.client()
    #     users_ref = db.collection('users')
        
    #     user_doc = users_ref.where('email', '==', email).get()
    #     if len(user_doc) == 0:
    #         username = email.split('@')[0]  
    #         users_ref.add({
    #             'username': username,
    #             'email': email
    #         })

    #     messagebox.showinfo("Success", f"Login berhasil sebagai {email}.")
    #     subprocess.run(["python", "gui.py"])  

    # except Exception as e:
    #     messagebox.showerror("Error", f"Gagal login: {str(e)}")